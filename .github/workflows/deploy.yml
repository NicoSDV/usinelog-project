name: Deploy Usinelog Project

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy via Jump Host
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 1 - Copy files from GitHub runner → jump host
      - name: Copy app files to jump host
        run: |
          scp -o StrictHostKeyChecking=no \
            -r usinelog-project/app-rh_adm/application \
            ${{ secrets.JUMP_HOST_USER }}@${{ secrets.JUMP_HOST_IP }}:/home/${{ secrets.JUMP_HOST_USER }}/

      - name: Copy monitoring files to jump host
        run: |
          scp -o StrictHostKeyChecking=no \
            -r usinelog-project/app-rh_adm/monitoring \
            ${{ secrets.JUMP_HOST_USER }}@${{ secrets.JUMP_HOST_IP }}:/home/${{ secrets.JUMP_HOST_USER }}/

      # Step 2 - From jump host → copy & deploy to VM APP
      - name: Deploy to APP VM from jump host
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.JUMP_HOST_USER }}@${{ secrets.JUMP_HOST_IP }} << 'EOF'
            # Copy files to app VM
            scp -o StrictHostKeyChecking=no -r /home/${{ secrets.JUMP_HOST_USER }}/application azureuser@10.2.0.10:/home/azureuser/

            # Install Docker if not already installed
            ssh -o StrictHostKeyChecking=no azureuser@10.2.0.10 << 'INNER'
              sudo apt update
              sudo apt install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
                https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt update
              sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            INNER

            # Deploy app
            ssh -o StrictHostKeyChecking=no azureuser@10.2.0.10 << 'INNER'
              cd /home/azureuser/application
              docker build -t odoo_custom .
              docker compose up -d
            INNER
          EOF

      # Step 3 - From jump host → copy & deploy to VM MONITORING
      - name: Deploy to Monitoring VM from jump host
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.JUMP_HOST_USER }}@${{ secrets.JUMP_HOST_IP }} << 'EOF'
            # Copy files to monitoring VM
            scp -o StrictHostKeyChecking=no -r /home/${{ secrets.JUMP_HOST_USER }}/monitoring azureuser@10.1.0.10:/home/azureuser/

            # Install Docker if not already installed
            ssh -o StrictHostKeyChecking=no azureuser@10.1.0.10 << 'INNER'
              sudo apt update
              sudo apt install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
                https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt update
              sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            INNER

            # Deploy monitoring
            ssh -o StrictHostKeyChecking=no azureuser@10.1.0.10 << 'INNER'
              cd /home/azureuser/monitoring
              docker compose up -d
            INNER
          EOF
